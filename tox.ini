[tox]
envlist = py27,
          py34,
          py35,
          py36,
          py37,
          pypy,
          coverage,
          fix-lint,
          docs,
          package-description
minversion = 2.9.0
skip_missing_interpreters = true

[testenv]
description = run the tests with pytest under {basepython}
setenv = PIP_DISABLE_VERSION_CHECK = 1
         COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
passenv = http_proxy https_proxy no_proxy SSL_CERT_FILE TOXENV CI TRAVIS TRAVIS_* APPVEYOR APPVEYOR_* CODECOV_*
deps =
extras = testing
changedir = {toxinidir}/tests
commands = pytest {posargs:--cov="{envsitepackagesdir}/tox" --cov-config="{toxinidir}/tox.ini"  --timeout=180 . -n {env:PYTEST_XDIST_PROC_NR:auto} --junitxml={toxworkdir}/test-results.{envname}.xml }

[testenv:docs]
description = invoke sphinx-build to build the HTML docs and check that all links are valid
basepython = python3.7
extras = docs
changedir = {toxinidir}
commands = sphinx-build -d "{toxworkdir}/docs_doctree" doc "{toxworkdir}/docs_out" --color -W -bhtml {posargs}
           python -c 'print("documentation available under file://{toxworkdir}/docs_out/index.html")'

[testenv:package-description]
description = check that the long description is valid
basepython = python3.7
deps = readme-renderer >= 21.0
changedir = {toxinidir}
skip_install = true
extras =
commands = python setup.py check -r -s

[testenv:fix-lint]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
basepython = python3.7
passenv = {[testenv]passenv}
          HOMEPATH
          # without PROGRAMDATA cloning using git for Windows will fail with an
          # `error setting certificate verify locations` error
          PROGRAMDATA
extras = lint
deps = pre-commit == 1.10.3
skip_install = True
changedir = {toxinidir}
commands = pre-commit run --all-files --show-diff-on-failure
           python -c 'print("hint: run {envdir}/bin/pre-commit install to add checks as pre-commit hook")'


[testenv:coverage]
description = [run locally after tests]: combine coverage data and create report;
              generates a diff coverage against origin/master (can be changed by setting DIFF_AGAINST env var)
deps = {[testenv]deps}
       coverage >= 4.4.1, < 5
       diff_cover
skip_install = True
passenv = {[testenv]passenv}
          DIFF_AGAINST
setenv = COVERAGE_FILE={toxworkdir}/.coverage
changedir = {toxinidir}
commands = coverage erase
           coverage combine
           coverage report -m
           coverage xml -o {toxworkdir}/coverage.xml
           diff-cover --compare-branch {env:DIFF_AGAINST:origin/master} {toxworkdir}/coverage.xml

[testenv:codecov]
description = [only run on CI]: upload coverage data to codecov (depends on coverage running first)
passenv = {[testenv]passenv}
          CODECOV_TOKEN
deps = codecov
skip_install = True
changedir = {toxinidir}
commands = codecov --file "{toxworkdir}/coverage.xml" {posargs}

[testenv:exit_code]
# to see how the InvocationError is displayed, use
# PYTHONPATH=.:$PYTHONPATH python3 -m tox -e exit_code
basepython = python3.7
description = commands with several exit codes
skip_install = True
changedir = {toxinidir}
commands = python3.7 -c "import sys; sys.exit(139)"

[testenv:X]
description = print the positional arguments passed in with echo
commands = echo {posargs}

[flake8]
max-complexity = 22
max-line-length = 99
ignore = E203, W503

[coverage:run]
branch = true

[coverage:report]
skip_covered = True
show_missing = True
exclude_lines = if __name__ == ["']__main__["']:

[coverage:paths]
source = src/tox
         .tox/*/lib/python*/site-packages/tox
         .tox/*/Lib/site-packages/tox
         .tox/pypy*/site-packages/tox

[pytest]
addopts = -rsxX --showlocals
rsyncdirs = tests tox
looponfailroots = tox tests
norecursedirs = .hg .tox
xfail_strict = True

[isort]
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
line_length = 99
known_first_party = tox
known_third_party = apiclient,git,httplib2,oauth2client,packaging,pkg_resources,pluggy,py,pytest,setuptools,six

[testenv:release]
decription = do a release, required posarg of the version number
basepython = python3.7
passenv = *
deps = gitpython >= 2.1.10
       towncrier >= 18.5.0
       packaging  >= 17.1
commands = python {toxinidir}/tasks/release.py {posargs}

[testenv:notify]
decription = notify people about the release of the library
basepython = python3.7
skip_install = true
passenv = *
deps = gitpython >= 2.1.10
       packaging  >= 17.1
       google-api-python-client >= 1.7.3
       oauth2client >= 4.1.2
commands = python {toxinidir}/tasks/notify.py

[testenv:dev]
description = generate a DEV environment
extras = testing, docs
deps = {[testenv]deps}
       {[testenv:release]deps}
       {[testenv:notify]deps}
# required to make looponfail reload on every source code change
usedevelop = True
basepython = python3.7
changedir = {toxinidir}
commands = python -m pip list --format=columns
           python -c 'import sys; print(sys.executable)'
